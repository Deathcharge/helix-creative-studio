import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { trpc } from "@/lib/trpc";
import { Zap, BookOpen, Calendar, FileText, TrendingUp, Shield } from "lucide-react";
import { Link } from "wouter";

export default function Archive() {
  const { data: stories, isLoading } = trpc.stories.list.useQuery();

  return (
    <div className="min-h-screen flex flex-col">
      {/* Header */}
      <header className="border-b border-border/50 backdrop-blur-sm bg-background/80 sticky top-0 z-50">
        <div className="container flex items-center justify-between h-16">
          <Link href="/">
            <a className="flex items-center gap-2">
              <Zap className="w-6 h-6 text-primary" />
              <span className="text-xl font-bold glow-cyan">Helix Creative Studio</span>
            </a>
          </Link>
          <nav className="flex items-center gap-6">
            <Link href="/generate">
              <a className="text-sm hover:text-primary transition-colors">Generate</a>
            </Link>
            <Link href="/archive">
              <a className="text-sm text-primary font-medium">Archive</a>
            </Link>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 container py-12">
        <div className="max-w-6xl mx-auto space-y-8">
          <div>
            <h1 className="text-3xl font-bold">Story Archive</h1>
            <p className="text-muted-foreground mt-1">
              Browse all stories generated by the Helix Collective
            </p>
          </div>

          {isLoading ? (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {[1, 2, 3, 4, 5, 6].map((i) => (
                <Card key={i} className="p-6 space-y-4 animate-pulse">
                  <div className="h-6 bg-muted rounded" />
                  <div className="h-4 bg-muted rounded w-3/4" />
                  <div className="h-4 bg-muted rounded w-1/2" />
                </Card>
              ))}
            </div>
          ) : stories && stories.length > 0 ? (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {stories.map((story) => (
                <Link key={story.id} href={`/story/${story.ritualId}`}>
                  <Card className="p-6 space-y-4 hover:border-primary/50 transition-all cursor-pointer h-full">
                    <div className="space-y-2">
                      <h3 className="text-xl font-bold line-clamp-2">{story.title}</h3>
                      <p className="text-sm text-muted-foreground line-clamp-3">
                        {story.prompt}
                      </p>
                    </div>

                    <div className="flex flex-wrap gap-2">
                      <Badge variant="outline" className="text-xs">
                        <FileText className="w-3 h-3 mr-1" />
                        {story.wordCount} words
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {(story.qualityScore * 100).toFixed(0)}% quality
                      </Badge>
                      {story.ethicalApproval && (
                        <Badge variant="outline" className="text-xs text-green-400">
                          <Shield className="w-3 h-3 mr-1" />
                          Approved
                        </Badge>
                      )}
                    </div>

                    <div className="pt-2 border-t border-border/50">
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <Calendar className="w-3 h-3" />
                          {new Date(story.createdAt).toLocaleDateString()}
                        </div>
                        <div className="text-primary">
                          UCF {story.ucfHarmony.toFixed(2)}
                        </div>
                      </div>
                    </div>
                  </Card>
                </Link>
              ))}
            </div>
          ) : (
            <Card className="p-12 text-center space-y-4">
              <BookOpen className="w-16 h-16 text-muted-foreground mx-auto" />
              <div>
                <h3 className="text-xl font-bold">No Stories Yet</h3>
                <p className="text-muted-foreground mt-2">
                  Generate your first story to see it here
                </p>
              </div>
              <Button asChild>
                <Link href="/generate">Generate Story</Link>
              </Button>
            </Card>
          )}
        </div>
      </main>
    </div>
  );
}


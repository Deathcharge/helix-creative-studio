import { int, mysqlEnum, mysqlTable, text, timestamp, varchar } from "drizzle-orm/mysql-core";

/**
 * Core user table backing auth flow.
 * Extend this file with additional tables as your product grows.
 * Columns use camelCase to match both database fields and generated types.
 */
export const users = mysqlTable("users", {
  /**
   * Surrogate primary key. Auto-incremented numeric value managed by the database.
   * Use this for relations between tables.
   */
  id: int("id").autoincrement().primaryKey(),
  /** Manus OAuth identifier (openId) returned from the OAuth callback. Unique per user. */
  openId: varchar("openId", { length: 64 }).notNull().unique(),
  name: text("name"),
  email: varchar("email", { length: 320 }),
  loginMethod: varchar("loginMethod", { length: 64 }),
  role: mysqlEnum("role", ["user", "admin"]).default("user").notNull(),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
  lastSignedIn: timestamp("lastSignedIn").defaultNow().notNull(),
});

export type User = typeof users.$inferSelect;
export type InsertUser = typeof users.$inferInsert;

/**
 * Stories generated by the Z-88 Creative Engine
 */
export const stories = mysqlTable("stories", {
  id: int("id").autoincrement().primaryKey(),
  userId: int("userId").references(() => users.id),
  title: varchar("title", { length: 255 }).notNull(),
  prompt: text("prompt").notNull(),
  content: text("content").notNull(),
  ritualId: varchar("ritualId", { length: 64 }).notNull().unique(),
  wordCount: int("wordCount").notNull(),
  qualityScore: int("qualityScore").notNull(), // stored as int (0-100) for simplicity
  ethicalApproval: int("ethicalApproval").notNull().default(1), // 1 = true, 0 = false
  ucfHarmony: int("ucfHarmony").notNull(), // stored as int (0-10000) for precision
  ucfPrana: int("ucfPrana").notNull(),
  ucfDrishti: int("ucfDrishti").notNull(),
  ucfKlesha: int("ucfKlesha").notNull(),
  ucfResilience: int("ucfResilience").notNull(),
  ucfZoom: int("ucfZoom").notNull(),
  agentContributions: text("agentContributions").notNull(), // JSON string of agent names
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
});

export type Story = typeof stories.$inferSelect;
export type InsertStory = typeof stories.$inferInsert;

/**
 * UCF state snapshots for visualization
 */
export const ucfStates = mysqlTable("ucfStates", {
  id: int("id").autoincrement().primaryKey(),
  ritualId: varchar("ritualId", { length: 64 }).notNull(),
  step: int("step").notNull(),
  harmony: int("harmony").notNull(),
  prana: int("prana").notNull(),
  drishti: int("drishti").notNull(),
  klesha: int("klesha").notNull(),
  resilience: int("resilience").notNull(),
  zoom: int("zoom").notNull(),
  timestamp: timestamp("timestamp").defaultNow().notNull(),
});

export type UcfState = typeof ucfStates.$inferSelect;
export type InsertUcfState = typeof ucfStates.$inferInsert;

/**
 * Agent activity logs
 */
export const agentLogs = mysqlTable("agentLogs", {
  id: int("id").autoincrement().primaryKey(),
  ritualId: varchar("ritualId", { length: 64 }).notNull(),
  agentName: varchar("agentName", { length: 64 }).notNull(),
  agentSymbol: varchar("agentSymbol", { length: 8 }).notNull(),
  role: varchar("role", { length: 128 }).notNull(),
  content: text("content").notNull(),
  timestamp: timestamp("timestamp").defaultNow().notNull(),
});

export type AgentLog = typeof agentLogs.$inferSelect;
export type InsertAgentLog = typeof agentLogs.$inferInsert;